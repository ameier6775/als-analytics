import Excel from 'exceljs';
import _, { groupBy, keyBy, omit, pick, orderBy, result } from 'lodash';
import path from 'path';
import excuteQuery from '../../../../lib/db';

export default async function handler(req, res) {
  if (req.method === 'POST') {
    const result = await excuteQuery({
      query:
        "SELECT team, goalsFor, RANK() OVER (ORDER BY goalsFor DESC) goalsForRank, ROUND((goalsFor - (SELECT MIN(goalsFor) FROM NHL_2021.teams_moneypuck WHERE situation = 'all')) / (SELECT MAX(goalsFor) - MIN(goalsFor) FROM NHL_2021.teams_moneypuck WHERE situation = 'all'), 2) AS goalsForRate, xGoalsFor, RANK() OVER (ORDER BY xGoalsFor DESC) xGoalsForRank, ROUND((xGoalsFor - (SELECT MIN(xGoalsFor) FROM NHL_2021.teams_moneypuck WHERE situation = 'all')) / (SELECT MAX(xGoalsFor) - MIN(xGoalsFor) FROM NHL_2021.teams_moneypuck WHERE situation = 'all'), 2) AS xGoalsForRate, takeawaysFor, RANK() OVER (ORDER BY takeawaysFor DESC) takeawaysForRank, ROUND((takeawaysFor - (SELECT MIN(takeawaysFor) FROM NHL_2021.teams_moneypuck WHERE situation = 'all')) / (SELECT MAX(takeawaysFor) - MIN(takeawaysFor) FROM NHL_2021.teams_moneypuck WHERE situation = 'all'), 2) AS takeawaysForRate,  shotAttemptsFor, RANK() OVER (ORDER BY shotAttemptsFor DESC) shotAttemptsForRank, ROUND((shotAttemptsFor - (SELECT MIN(shotAttemptsFor) FROM NHL_2021.teams_moneypuck WHERE situation = 'all')) / (SELECT MAX(shotAttemptsFor) - MIN(shotAttemptsFor) FROM NHL_2021.teams_moneypuck WHERE situation = 'all'), 2) AS shotAttemptsForRate, goalsAgainst, RANK() OVER (ORDER BY goalsAgainst) goalsAgainstRank, ROUND(1 - (goalsAgainst - (SELECT MIN(goalsAgainst) FROM NHL_2021.teams_moneypuck WHERE situation = 'all')) / (SELECT MAX(goalsAgainst) - MIN(goalsAgainst) FROM NHL_2021.teams_moneypuck WHERE situation = 'all'), 2) AS goalsAgainstRate, xGoalsAgainst, RANK() OVER (ORDER BY xGoalsAgainst) xGoalsAgainstRank, ROUND(1 - (xGoalsAgainst - (SELECT MIN(xGoalsAgainst) FROM NHL_2021.teams_moneypuck WHERE situation = 'all')) / (SELECT MAX(xGoalsAgainst) - MIN(xGoalsAgainst) FROM NHL_2021.teams_moneypuck WHERE situation = 'all'), 2) AS xGoalsAgainstRate, giveawaysFor, RANK() OVER (ORDER BY giveawaysFor) giveawaysForRank, ROUND(1 - (giveawaysFor - (SELECT MIN(giveawaysFor) FROM NHL_2021.teams_moneypuck WHERE situation = 'all')) / (SELECT MAX(giveawaysFor) - MIN(giveawaysFor) FROM NHL_2021.teams_moneypuck WHERE situation = 'all'), 2) AS giveawaysForRate, shotAttemptsAgainst, RANK() OVER (ORDER BY shotAttemptsAgainst) shotAttemptsAgainstRank, ROUND(1 - (shotAttemptsAgainst - (SELECT MIN(shotAttemptsAgainst) FROM NHL_2021.teams_moneypuck WHERE situation = 'all')) / (SELECT MAX(shotAttemptsAgainst) - MIN(shotAttemptsAgainst) FROM NHL_2021.teams_moneypuck WHERE situation = 'all'), 2) AS shotAttemptsAgainstRate, ROUND(faceOffsWonFor / (faceOffsWonFor + faceOffsWonAgainst), 2) AS faceoffPercentage, RANK() OVER (ORDER BY faceOffsWonFor / (faceOffsWonFor + faceOffsWonAgainst) DESC) faceoffsRank, penaltiesAgainst - penaltiesFor AS penaltyDifferential, RANK() OVER (ORDER BY penaltiesFor - penaltiesAgainst) AS penaltyRank FROM NHL_2021.teams_moneypuck AS rankings WHERE situation = 'all' ORDER BY team;",
      values: [req.body.content],
    });
    res.json(result);
    console.log('posting data ' + req.body.team);
  } else if (req.method === 'GET') {
    const result = await excuteQuery({
      query:
        "SELECT team AS value, team AS label, team, goalsFor, RANK() OVER (ORDER BY goalsFor DESC) goalsForRank, ROUND((goalsFor - (SELECT MIN(goalsFor) FROM NHL_2021.teams_moneypuck WHERE situation = 'all')) / (SELECT MAX(goalsFor) - MIN(goalsFor) FROM NHL_2021.teams_moneypuck WHERE situation = 'all'), 2) AS goalsForRate, xGoalsFor, RANK() OVER (ORDER BY xGoalsFor DESC) xGoalsForRank, ROUND((xGoalsFor - (SELECT MIN(xGoalsFor) FROM NHL_2021.teams_moneypuck WHERE situation = 'all')) / (SELECT MAX(xGoalsFor) - MIN(xGoalsFor) FROM NHL_2021.teams_moneypuck WHERE situation = 'all'), 2) AS xGoalsForRate, takeawaysFor, RANK() OVER (ORDER BY takeawaysFor DESC) takeawaysForRank, ROUND((takeawaysFor - (SELECT MIN(takeawaysFor) FROM NHL_2021.teams_moneypuck WHERE situation = 'all')) / (SELECT MAX(takeawaysFor) - MIN(takeawaysFor) FROM NHL_2021.teams_moneypuck WHERE situation = 'all'), 2) AS takeawaysForRate,  shotAttemptsFor, RANK() OVER (ORDER BY shotAttemptsFor DESC) shotAttemptsForRank, ROUND((shotAttemptsFor - (SELECT MIN(shotAttemptsFor) FROM NHL_2021.teams_moneypuck WHERE situation = 'all')) / (SELECT MAX(shotAttemptsFor) - MIN(shotAttemptsFor) FROM NHL_2021.teams_moneypuck WHERE situation = 'all'), 2) AS shotAttemptsForRate, goalsAgainst, RANK() OVER (ORDER BY goalsAgainst) goalsAgainstRank, ROUND(1 - (goalsAgainst - (SELECT MIN(goalsAgainst) FROM NHL_2021.teams_moneypuck WHERE situation = 'all')) / (SELECT MAX(goalsAgainst) - MIN(goalsAgainst) FROM NHL_2021.teams_moneypuck WHERE situation = 'all'), 2) AS goalsAgainstRate, xGoalsAgainst, RANK() OVER (ORDER BY xGoalsAgainst) xGoalsAgainstRank, ROUND(1 - (xGoalsAgainst - (SELECT MIN(xGoalsAgainst) FROM NHL_2021.teams_moneypuck WHERE situation = 'all')) / (SELECT MAX(xGoalsAgainst) - MIN(xGoalsAgainst) FROM NHL_2021.teams_moneypuck WHERE situation = 'all'), 2) AS xGoalsAgainstRate, giveawaysFor, RANK() OVER (ORDER BY giveawaysFor) giveawaysForRank, ROUND(1 - (giveawaysFor - (SELECT MIN(giveawaysFor) FROM NHL_2021.teams_moneypuck WHERE situation = 'all')) / (SELECT MAX(giveawaysFor) - MIN(giveawaysFor) FROM NHL_2021.teams_moneypuck WHERE situation = 'all'), 2) AS giveawaysForRate, shotAttemptsAgainst, RANK() OVER (ORDER BY shotAttemptsAgainst) shotAttemptsAgainstRank, ROUND(1 - (shotAttemptsAgainst - (SELECT MIN(shotAttemptsAgainst) FROM NHL_2021.teams_moneypuck WHERE situation = 'all')) / (SELECT MAX(shotAttemptsAgainst) - MIN(shotAttemptsAgainst) FROM NHL_2021.teams_moneypuck WHERE situation = 'all'), 2) AS shotAttemptsAgainstRate, ROUND(faceOffsWonFor / (faceOffsWonFor + faceOffsWonAgainst), 2) AS faceoffPercentage, RANK() OVER (ORDER BY faceOffsWonFor / (faceOffsWonFor + faceOffsWonAgainst) DESC) faceoffsRank, penaltiesAgainst - penaltiesFor AS penaltyDifferential, RANK() OVER (ORDER BY penaltiesFor - penaltiesAgainst) AS penaltyRank FROM NHL_2021.teams_moneypuck AS rankings WHERE situation = 'all' ORDER BY team;",

      values: [req.body.content],
    });
    res.json(result);
    console.log('getting data');
  }
}
